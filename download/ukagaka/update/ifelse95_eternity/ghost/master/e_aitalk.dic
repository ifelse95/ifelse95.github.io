AiTalk
{
	if STRLEN(offscreen) == 0
	{
		if CHAIN.IDName == ""
		{
			lastTalk = RandomTalk
		}
		else
		{
			lastTalk = ChainTalk
		}
		lastTalk
	}
	else
	{ 
		OffscreenTalk(ANY(offscreen))
	}
}

OnFoodInput
{
	favfoodans = reference0
	foodresponse = 1
	if reference0 == "Black forest cake" || reference0 == "black forest cake"
	{
		"\0\s[5]Hey!\w5 That's my fav,\w5 too!!"
	}
	else
	{
		"\0\s[12]Ooh!\w5\0\s[5] That sounds good!\e"
	}
}

OnColorInput
{
	favcolorans = reference0
	colorresponse = 1
	if reference0 == "Hot pink" || reference0 == "hot pink"
	{
		"\0\s[2]Oh!!\w8\w8\0\s[5] Hot pink is my favorite color too!!!\e"
	}
	else
	{
		"\0\s[8]Ooh...\w8\w8\0\s[5] %(favcolorans) is a great color!\e"
	}
}

ThanksgivingRoast
{
	"\n\n\_q"
	--
	"\![*]\q[D-do you mean Thanksgiving...?,OnTGRAnswer]"
}

OnTGRAnswer
{
	thanksgivingroast = 1
	"\0\s[8]Mmm...\w8 So that's what it's called...\e"
}

//nonoverlap means that all possible dialogue candidates will be chosen at least once before any dialogues are repeated. Note that sets of brackets (with or without an if statement) count as a single dialogue candidate! That's why I've used the Pool function instead, it'll output everything in the if statement and the probabilities and nonoverlap will be handled properly.
RandomTalk : nonoverlap
{
	"\0\s[6]This is a pretty neat wallpaper,\w5 %(username).\e"
	"\0\s[0]You know what I'm thinking about?\w8\w8\w8\n\n[half]\_a[https://knowyourmeme.com/memes/cousin-throckmorton]Thockmorten, \w5the skater.\_a\e:chain=achain"
	"\0\s[0]Today's %(nowday).\e"
	"\0\s[0]Tomorrow will be %(nowday('next')).\e"
	"\0\s[0]Yesterday was %(nowday('last')),\w5 by the way.\e"
	
	//This will call the example pool I've set up below. The second argument, %(username != ''), means that this pool will be available so long as the username is not blank. You can put any if check in there! For example: %(month == 2) would make a pool only available in February, while %(nowmode == 'Ultimate Form') would make a pool only available while the nowmode variable is set to "Ultimate Form".
	parallel Pool("Pool_Example","%(username != '')")
	parallel Pool("Pool_Trust_OK","%(trust >= 10)")
	
	//User Environment Ifs
	//---Timeslots---
	parallel Pool("Pool_timeslot_earlymorning","%(timeslot == 'earlymorning')")
	parallel Pool("Pool_timeslot_morning","%(timeslot == 'morning')")
	parallel Pool("Pool_timeslot_lunch","%(timeslot == 'lunch')")
	parallel Pool("Pool_timeslot_afternoon","%(timeslot == 'afternoon')")
	parallel Pool("Pool_timeslot_evening","%(timeslot == 'evening')")
	parallel Pool("Pool_timeslot_latenight","%(timeslot == 'latenight')")
	parallel Pool("Pool_timeslot_midnight","%(timeslot == 'midnight')")

	parallel Pool("Pool_wd_Sun","%(wd == 'Sun')")
	parallel Pool("Pool_wd_Mon","%(wd == 'Mon')")
	parallel Pool("Pool_wd_Tue","%(wd == 'Tue')")
	parallel Pool("Pool_wd_Wed","%(wd == 'Wed')")
	parallel Pool("Pool_wd_Thu","%(wd == 'Thu')")
	parallel Pool("Pool_wd_Fri","%(wd == 'Fri')")
	parallel Pool("Pool_wd_Sat","%(wd == 'Sat')")

	parallel Pool("Pool_startmonth","%(day < 5)")
	parallel Pool("Pool_midmonth","%(day > 13 && day < 17)")
	parallel Pool("Pool_endmonth","%(day > 26)")

	parallel Pool("Pool_month_Jan","%(month == 1)")
	parallel Pool("Pool_month_Feb","%(month == 2)")
	parallel Pool("Pool_month_Mar","%(month == 3)")
	parallel Pool("Pool_month_Apr","%(month == 4)")
	parallel Pool("Pool_month_May","%(month == 5)")
	parallel Pool("Pool_month_Jun","%(month == 6)")
	parallel Pool("Pool_month_Jul","%(month == 7)")
	parallel Pool("Pool_month_Aug","%(month == 8)")
	parallel Pool("Pool_month_Sep","%(month == 9)")
	parallel Pool("Pool_month_Oct","%(month == 10)")
	parallel Pool("Pool_month_Nov","%(month == 11)")
	parallel Pool("Pool_month_Dec","%(month == 12)")

	parallel Pool("Pool_season_Spring","%(season == 'Spring')")
	parallel Pool("Pool_season_Summer","%(season == 'Summer')")
	parallel Pool("Pool_season_Autumn","%(season == 'Autumn')")
	parallel Pool("Pool_season_Winter","%(season == 'Winter')")
	
	//---Noticing and commenting on other ghosts---
	//Remember that you have to check for the sakura name of another ghost, not the ghost name.
	if "Girl" _in_ ghostexlist
	{
		"\0\s[0]Another template ghost!\w8\w8 Hi Girl!\e"
	}
	//other things carried over from old template
	if foodresponse != 1 && trust >= 5
	{
    "\0\s[8]Hey...\w5What's your favorite food?\![open,inputbox,OnFoodInput,-1]\e"
	}
	else
	{
    ""
	}

	if colorresponse != 1 && trust >= 5
	{
    "\0\s[8]Hey! \w5What's your favorite color?\![open,inputbox,OnColorInput,-1]\e"
	}
	else
	{
    ""
	}
	
	//this sees if notepad++ is open so eternity can talk about it.
	NotepadOpen = FUNCTIONEX("saori/findwin.dll","find",,"Notepad++")
    NotepadMin = FUNCTIONEX("saori/findwin.dll","count",,"Notepad++")
    Notepad = FUNCTIONEX("saori/findwin.dll","getcaption","Notepad++")
	LOGGING("=====================================")
	LOGGING("NotepadOpen: ",NotepadOpen)
	LOGGING("NotepadMin: ",NotepadMin)
	LOGGING("Notepad: ",Notepad)
    
    if NotepadOpen == 1
    {
        if "Notepad++" _in_ Notepad
        {
            if NotepadMin >= 1
            {
                if SeeNotepad == "On"
                {
                    Notepad = REPLACE(Notepad," - Notepad++","") //removes " - Notepad++"
					if "ifelse95_eternity" _in_Notepad
					{
						"\0\s[8]Huh...?\w8 %(Notepad)...\w8\w8\w8\w8\n\n[half]\0\s[2] Hey!\w8\0\s[3] What are you doing in there?!\e"
					}
					else
					{
						"\0\s[8]Ooohh...\w5 What's this?\w8 Is this code?\e"
					}
                }
            }
        }
    }
}


//-----------Pools-----------

//Example of a pool. You can name pools whatever you like. I always start them with Pool_ so that it's clear what they are. They MUST have : array after the function name, or they won't work. I also recommend putting a comment with what if check activates this pool, so it's easy to remember later.
Pool_Example : array //username != ""
{
	"\0\s[16]Sooo...\w8\w8 Uhh,\w5 how's the weather?\e"
	
	"\0\s[17]Say,\w5 this is a nice computer you have here!\w8\w8\w8\n\n[half]\0\s[19]...\w8Oh. \w8\w8\w8Oh my... \w5%(username)...\w8\w8\w8\w8\n\n[half]\s[5]Haha,\w5 just kidding.\e"
	
	"\0\s[17]Oooohh~\w8 What's in heeeereeee~?\w8\w8\w8\w8\s[18]\n\n[half].\w8.\w8.\w8\w8Huh?\w8\w8\w8\w8\n\n[half]\s[6]Hmmmm...~\w8 Just kidding~"
	
	"\0\s[8]Say,\w5 you aren't from my Home Dimension,\w5 right?\e"
}

Pool_Trust_OK : array //trust >= '10'
{
	"\0\s[0]If you're seeing this, this is a placeholder. The trust variable is at %(trust).\e"
}


//---Timeslots---
Pool_timeslot_earlymorning : array //timeslot == 'earlymorning' (5am - 8am)
{
	"\0\s[8].../w5Is that the sun?\e"
	//These are sub-pools, I've put them just below this one. Any dialogues you put in them will also get the same probabilities as all other dialogue.
	parallel Pool("Pool_timeslot_earlymorning_uplate","%(runtime[0] >= 3)") //Been open for 3 hours or more, so the user has probably been up all night
	parallel Pool("Pool_timeslot_earlymorning_upearly","%(runtime[0] < 3)") //Probably just got up
}

Pool_timeslot_earlymorning_uplate : array //runtime[0] >= 3 (Been open for 3 hours or more, so the user has probably been up all night)
{
	"\0\s[16]I enjoyed our time together.\w8\w8 Thank you for keeping me company tonight.\e"
	"\0\s[12]Say,\w5 %(username),\w5 we have been up all night!\w5 Having fun!\w8\w8\w8\w8\s[2]\w8\w8\s[13]\n\n[half]No...\w8 Not like that...\e"
	"\0\s[0]I like spending time with you,\w5 %(username),\w5\s[4] but I do worry about you being tired.\w8 Humans require more rest than Figments do.\e"
}

Pool_timeslot_earlymorning_upearly : array //runtime[0] < 3 (Probably just got up)
{
	"\0\s[14]*Yawn...*\e"
	"\0\s[14]It's too damn early...\e"
}

Pool_timeslot_morning : array //timeslot == 'morning' (9am - 11am)
{
	"\0\s[0]Have you had breakfast yet?\w5 Make sure to eat breakfast!\e"
}

Pool_timeslot_lunch : array //timeslot == 'lunch' (12pm - 2pm)
{
	"\0\s[0]Have you eaten anything for lunch?\w5 Remember to do that!\e"
}

Pool_timeslot_afternoon : array //timeslot == 'afternoon' (3pm - 5pm)
{
	"\0\s[0]Hmm...\e"
}

Pool_timeslot_evening : array //timeslot == 'evening' (6pm - 8pm)
{
	"\0\s[0]Have you eaten dinner?\w5 Make sure you do soon.\e"
}

Pool_timeslot_latenight : array //timeslot == 'latenight' (9pm - 12am)
{
	
}

Pool_timeslot_midnight : array //timeslot == 'midnight' (1am - 4am)
{
	
}


//---Days of the week---

Pool_wd_Sun : array //wd == "Sun"
{
	
}

Pool_wd_Mon : array //wd == "Mon"
{
	
}

Pool_wd_Tue : array //wd == "Tue"
{
	
}

Pool_wd_Wed : array //wd == "Wed"
{
	
}

Pool_wd_Thu : array //wd == "Thu"
{
	
}

Pool_wd_Fri : array //wd == "Fri"
{
	
}

Pool_wd_Sat : array //wd == "Sat"
{
	
}


//---Days in the month---
Pool_startmonth : array //day < 5 (start of the month)
{
	
}

Pool_midmonth : array //day > 13 && day < 17 (middle of the month)
{
	
}

Pool_endmonth : array //day > 26 (end of the month)
{
	
}


//---Months--- (Northern hemisphere/Southern hemisphere)
Pool_month_Jan : array //month == 1
{
	
}

Pool_month_Feb : array //month == 2
{
	
}

Pool_month_Mar : array //month == 3 (Spring start/Autumn start)
{
	
}

Pool_month_Apr : array //month == 4
{
	
}

Pool_month_May : array //month == 5
{
	
}

Pool_month_Jun : array //month == 6 (Summer start/Winter start)
{
	
}

Pool_month_Jul : array //month == 7
{
	
}

Pool_month_Aug : array //month == 8
{
	
}

Pool_month_Sep : array //month == 9 (Autumn start/Spring start)
{
	
}

Pool_month_Oct : array //month == 10
{
	
}

Pool_month_Nov : array //month == 11
{
	"\0\s[4]It's always kinda gloomy around this time of year for some reason...\e"
		if thanksgivingroast != 1
			{
				"\0\s[8]Hm...\w8\w8\w8\w8\0\s[0] Doesn't some place somewhere use this month to stuff their faces in lots 'n lots of food?\w8\w8\w8\w8\n\n[half]\0\s[5]It sounds great!!\w5 A day to just eat without judgement! \w8\w8\w8\w8\0\s[3]\w8\w8...\w5Except,\w5 like,\w5 they also celebrate colonialism or something..."
				--
				ThanksgivingRoast
			}
		else
			{
				"\0\s[0]...\w8Thanksgiving,\w5 huh?\e"
			}
}

Pool_month_Dec : array //month == 12 (Winter start/Summer start)
{
	
}


//---Seasons---
Pool_season_Spring : array //season == 'Spring'
{
	
}

Pool_season_Summer : array //season == 'Summer'
{
	
}

Pool_season_Autumn : array //season == 'Autumn'
{
	
}

Pool_season_Winter : array //season == 'Winter'
{
	
}

//-----------Chains-----------

//Example of a chain. The dialogues will play in order each time the ghost talks until it reaches chain=end.
achain
{{CHAIN
	"\0\s[8]Like,\w8 who names their offspring...\w8\w8\n\n[half]''Throck\w8mor\w8ten\w8?''\e"
	"\0\s[9]I mean,\w5 I guess I don't really have room to talk.\w8 My name is Eternity.\w8\w8\n\n[half]\s[6]At least,\w5 that's what I've told\w5 \f[italic,true]you\f[italic,false]\w5  to call me.\e"
	"\0\s[2]Huh?\w8 Are you doubting that my name is actually Eternity,\w5 %(username)?\e"
	"\0\s[0]Anyways,\w5 apparently there is a town in Texas called Throckmorten.\e:chain=end"
}}CHAIN


//-----------Timekeeping systems and related dialogue-----------

OnMinuteChange
{
	AngerCheck
	--
	if hour == 0 && minute == 0; AutoUpdates[1] = 0 //Resetting auto updates
	
	if minute == 0 && HourNotifs == "On" //Top of the hour notifications
	{
		if hour == 0
		{
			if day == 1 && month == 1
			{
				"\0\s[0]Happy new year!\e"
			}
			else
			{
				"\0\s[0]It's midnight.\e"
			}
		}
		elseif hour == 12
		{
			"\0\s[0]It's noon.\e"
		}
		else
		{
			"\0\s[0]It's %(hour12) o'clock.\e"
		}
	}
	elseif ARRAYSIZE(offscreen) > 0 //If the ghost is off the screen, it will run the off screen dialogue every minute
 	{
 		OffscreenTalk
	}
	--
	if AutoUpdates[0] == "On" && AutoUpdates[1] == 0 //Once a day the ghost will check for updates if the user has auto updates on
	{
		AutoUpdates[1] = 1
		"\![updatebymyself,checkonly]"
	}
	
}

AngerCheck
	{
		if mood <= -25
		{
			"\0\s[15]Y'know,\w5 %(username)?\w8 I'm sick of your shit.\w8\w8 Come back when you're done being a soggy lampshade.\w8"
			mood = 0
			--
			"\-"
		}
		else
		{
			""
		}
	}

OnSecondChange
{
	if runtime[2] >= 59
	{
		runtime[2] = 0
		runtime[1]++
		if runtime[1] >= 59
		{
			runtime[1] = 0
			runtime[0]++
			totalhours++
		}
	}
	else
	{
		runtime[2]++
	}
	if reference2 == 1 //This is for if your Sakura and Kero are overlapping. \4 will move the speaking character away from the other character.
	{
		""
	}
	elseif ARRAYSIZE(waitingcommuS) > 0 && second % 5 == 0 //Every 5 seconds, check if the balloon is closed and a communication is waiting, and if so trigger a response
	{
		_b = BalloonCheck
		if _b == 0; WaitingCommu
	}
}

OnOffscreen
{
	//I've tinkered a lot with this function to get it working for multiple characters. If you need more than 2, just copy the format below very carefully, and make sure you increment the numbers. It's not perfect; if you have multiple characters off screen at once it might pick the wrong dialogues, but you can add more elseifs to handle those cases if you really want them.
	offscreen = TOSTR(reference0)
	CVSTR(reference0)
	CVSTR(reference1)
	
	if "0" _in_ reference0 //Checks if the sakura was moved off screen
	{
		OffscreenTalk("0")
	}
	elseif "1" _in_ reference0 //Checks if the kero was moved off screen
	{
		OffscreenTalk("1")
	}
	
	//Coming back on screen
	elseif "0" _in_ reference1 //Checks if the sakura is no longer off screen
	{
		EndOffscreenTalk("0")
	}
	elseif "1" _in_ reference1 //Checks if the kero is no longer off screen
	{
		EndOffscreenTalk("1")
	}
}

OffscreenTalk //Off the screen dialogue. Ctrl Shift F12 will bring characters back onto the screen. _argv[0] here contains the number of the character who is off screen, 0 for sakura, 1 for kero, 2 and up for extra chars
{
	if _argv[0] == "0" //If the sakura is off screen
	{
		"\0\s[0]I'm off the screen.\w8\w8 You can press Ctrl Shift F12 to bring me back.\e"
	}
	elseif _argv[0] == "1" //If the kero is off screen
	{
		""
	}
}

EndOffscreenTalk //Being brought back on the screen. _argv[0] here contains the number of the character who was brought back on screen, 0 for sakura, 1 for kero, 2 and up for extra chars
{
	if _argv[0] == "0" //If the sakura was brought back on screen
	{
		"\0\s[0]I'm back!\e"
	}
	elseif _argv[0] == "1" //If the kero was brought back on screen
	{
		""
	}
}

OnSurfaceRestore //OnSurfaceRestore happens around 30 seconds after the ghost's last dialogue. reference0 here stores the number of the previous surface, so you can have them comment when they change back if you like.
{
	"\1\s[-1]\0\s[0]\e"
}