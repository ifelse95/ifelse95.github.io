OpenSakuraMenu
{
	if AutoUpdates[1] == 2 //If an update is available, the user will be notified when they try to open the menu
	{
		"\0\s[17]Oh!\w3 Oh!\w5 %(username),\w8 there is something here about an update!\w8\w8 Would you like to download it?"
		--
		//Note: the download it now option will go straight into updating without directing to another function. You can do this with some things using 'script:' in the function name, but it's finicky. If this gives you issues feel free to replace it.
		"\_q\n\n\![*]\q[Download it now,script:\![updatebymyself\]]\n/
		\![*]\q[Maybe later,UpdateLater]\n\n/
		\![*]\q[Turn off auto updates,UpdateOff]\e"
	}
	else //Normal menu opening
	{
		"\0\s[0]\b2Yo."
		"\0\s[0]\b2What's up?"
		"\0\s[0]\b2You rang?"
		--
		OnMenuRun
	}
}

Select.UpdateLater //If the user decides to update later
{
	AutoUpdates[1] = 1
	
	"\0\s[17]No problem,\w8\s[0] I'll remind ya once a day.\e"
}

Select.UpdateOff //If the user no longer wants to be notified about updates
{
	AutoUpdates[0] = "Off"
	AutoUpdates[1] = 1
	
	"\0\s[0]Alright,\w5 I won't look for updates.\w8\w8 If you change your mind,\w5 feel free to tick the Auto Updates button back to on.\e"
}

OnMenuRun //Main menu
{
	"\b2\n\n\_q"
	--
	if lastTalk != ""
	{
		"\![*]\q[Can you repeat that?,OnLastTalk]"
	}
	--
	"\n/
	\![*]\q[What's on your mind?,OnAiTalk]\n/
	\![*]\q[Talk to another ghost,OnStartTalking]\n\n/
	\![*]\q[Can you do me a favor?,OnFunctionMenu]\n/
	\![*]\q[Can I see the config menu?,OnConfigMenu]\n/
	\![*]\q[I have something for you!,gimmegift]\n/
	\![*]\q[I'm not doing well...,mhres]\n\n"
	--
	if debug == 1 //%(debug = 1) in script input to show the debug options
	{
		"\![*]\q[Test Variable,OnTestVar]\n/
		 \![*]\q[To-do list,OnTemplateTodo]\n/
		 \![*]\q[Data,displayvar]\n/
		 \![*]\q[Check Template Version,OnTemplateUpdate]\n\n"
		//The template update check is in zzz_todo.dic. It doesn't do a network update, it checks my website and compares your version to the most recent version. It cannot update automatically, so as not to erase your progress.
	}
	--
	"\![*]\q[Nevermind,Cancel]\n\n"
	--
	"%(wd) %(nowhour):%(nowmin) %(ap), %(month)/%(day)/%(year) - %(season)"
	--
	"\nRuntime: %(runtime[0]):%(runmin)            Version %(ghostver)\e"
}

OnLastTalk //Repeats the last thing the ghost said
{
	"%(lastTalk)\e"
}

//----------Function Menu----------
OnFunctionMenu
{
	"\0\_q\b2\s[0]Sure, what do you want me to do?"
	--
	"\n\n/
	\![*]\q[Check Email,script:\![biff\]]\n/
	\![*]\q[Fix the Clock,script:\![execute,sntp\]]\n/
	\![*]\q[Open Calendar,OpenCalendar]\n/
	\![*]\q[Open SSP Preferences,SSPPrefs]\n/
	\![*]\q[Empty Recycle Bin,RecycleBin]\n/
	\![*]\q[Check Screen Resolution,getScreenRes]\n/
	\![*]\q[Show System Information,SystemInfo]\n/
	\![*]\q[Report a bug,BugReport]\n/
	\![*]\q[Check for updates,UpdateCheck]\n\n/
	\![*]\q[Back to main menu,OnMenuRun]\e"
}

Select.OpenCalendar
{
	"\0\s[0]Sure,\w4 here's the calendar!"
	--
	"\![open,calendar]\e"
}

Select.SSPPrefs
{
	"\0\s[0]Sure,\w4 here it is!"
	--
	"\![open,configurationdialog]\e"
}

Select.RecycleBin
{
	_gomicheck = FUNCTIONEX("saori/gomi.dll", "-n") //Gets the number of items in the recycle bin
	
	"Ok,\w4 I'll go empty the recycle bin!\w8\w8\s[-1]\w8\w8\w8\w8\n\n"
	--
	if _gomicheck > 0 //If there was something to empty
	{
		_gomi = FUNCTIONEX("saori/gomi.dll", "-f") //Calling the Saori to empty the recycle bin
		_s = ""; if _gomicheck != 1; _s = "s" //Plural check
		
		"\s[0]Done!\w8\w8 %(_gomicheck) item%(_s) cleared."
	}
	else //If it's empty
	{
		"\s[0]It was empty."
	}
	--
	"\n\n\![*]\q[Back to functions menu,OnFunctionMenu]\n\![*]\q[I'm done,cancelnodialogue]\e"
}

Select.getScreenRes
{
	"\0\s[0]Your screen resolution is %screenwidth x %screenheight.\e"
}

Select.SystemInfo //Partially copied from the GT template, but I tweaked a few things
{
	os_name = FUNCTIONEX("saori/saori_cpuid.dll","os.name")
	os_version = FUNCTIONEX("saori/saori_cpuid.dll","os.version")
	cpu_name = FUNCTIONEX("saori/saori_cpuid.dll","cpu.name")
	cpu_clockex = FUNCTIONEX("saori/saori_cpuid.dll","cpu.clockex")
	"/
	\0\b[2]\_q/
	OS: %(os_name) %(os_version)\n/
	Memory Load: %(memoryload)%\n/
	Physical Memory: %(memoryavailphys) KB\n/
	CPU: %(cpu_name) %(cpu_clockex)MHz\n/
	Uptime: %(systemuphour):%(systemupminute):%(systemupsecond)\n\n/
	Ukagaka: %property[baseware.version]\n\n"
	--
	"\![*]\q[Back to functions,OnFunctionMenu]\n/
	\![*]\q[Done,cancelnodialogue]\e"
}

Select.BugReport
{
	"\0\s[0]Bugs can be reported to the dev \_a[https://www.YourUrlforBugReports.com]here\_a!"
	--
	"\n\n\![*]\q[Back to functions,OnFunctionMenu]\n\![*]\q[I'm done,cancelnodialogue]\e"
}

Select.UpdateCheck //Starts an update check
{
	"\![updatebymyself]\e"
}

Select.displayvar
{
	DataDisDebug
}

DataDisDebug
{
	"\0\s[0]Eternity's trust is %(trust).\w8\w8 Their mood is %(mood).\w8\w8\n\n[half] Favorite food response is at %(foodresponse) (%(favfoodans)).\w8\w8 Favorite color response is at %(colorresponse) (%(favcolorans))\n\n"
	--
	"\_q"
	--
		"\![*]\q[Reset Trust,resettrust]\n/
		\![*]\q[Reset Mood,resetmood]\n/
		\![*]\q[Unanswer Fav Food,resetfavfood]\n/
		\![*]\q[Unanswer Fav Color,resetfavcolor]\n/
		\![*]\q[Make angry,makeangry]\n/
		\![*]\q[Back,BACKTOMENU]\e"
}

Select.resettrust
{
	trust = 0
	--
	DataDisDebug
}

Select.resetmood
{
	mood = 0
	--
	DataDisDebug
}

Select.makeangry
{
	mood = -25
	--
	DataDisDebug
}

Select.resetfavfood
{
	foodresponse = 0
	favfoodans = ""
	--
	DataDisDebug
}

Select.resetfavcolor
{
	colorresponse = 0
	favcolorans = ""
	--
	DataDisDebug
}


//----------Config Menu----------
OnConfigMenu //I moved changing name/pronouns/birthday over to Nameteach, because they're info about the user
{
	//This is here in case the variables get erased. The buttons will be set to default so the user has something to click. This has happened to my users before and resetting them is a painful process. Do not remove these.
	if username == ""; username = "User"
	if heshe == ""; {heshe = "they"; himher = "them"; hisher = "their"; hesshes = "they're"}
	if birthday[0] == ""; birthday[0] = "???"
	if hemisphere == ""; hemisphere = "Northern"
	if talkrate == ""; {talkrate = "every 5 minutes"; aitalkinterval = 300}
	if deleteshitai == ""; deleteshitai = "Off"
	if AutoUpdates[0] == ""; AutoUpdates[0] = "On"
	if betaTester == ""; betaTester = "Off"
	if HourNotifs == ""; HourNotifs = "On"
	--
	if reference0 == "cancelled name change"; "\![close,inputbox,OnNameTeach]" //If the user cancels changing their name, it will send them back to the config menu, and run this extra bit of code to close the inputbox. Same deal with the others below, but for the birthday
	elseif reference0 == "cancelled birthday month"; "\![close,inputbox,OnUserBornMonth]"
	elseif reference0 == "cancelled birthday day"; "\![close,inputbox,OnUserBornDay]"
	if "cancelled birthday" _in_ reference0; {birthday = oldbirthday; ERASEVAR("oldbirthday")} //resets the birthday to the old values, erases the temp variable
	--
	//the \_l[97] is telling it to put the ---Config--- at x 97, the middle of the balloon I use. Adjust as needed for your balloon, or remove it if you want
	"\_q\b2\n[half]/
	Your name: \q[%(username),OnChangeName]\n/
	Your pronouns: \q[%(heshe)/%(himher)/%(hisher),OnChangePronoun]\n/
	Your birthday: \q[%(birthday[0]),OnChangeBirthday]\n/
	Your hemisphere: \q[%(hemisphere),ToggleHemisphere]\n\n/
	Talk rate: \q[%(talkrate),ChangeTalk]\n/
	Hour Notifications: \q[%(HourNotifs),ToggleHourNotifs]\n\n/
	\![*]Enable Auto Update checks?\n(Currently: \q[%(AutoUpdates[0]),ToggleUpdate])\n/
	\![*]Opt in to beta updates? (Currently: \q[%(betaTester),ToggleBeta])\n\n/
	\![*]Enable SFX? (Currently: \q[%(sfxtoggle),ToggleSFX])\n/
	\![*]Enable Eternity to comment on Notepad++? (Currently: \q[%(SeeNotepad),ToggleNotepad])\n\n/
	\![*]Enable Uninstall? (Currently: \q[%(deleteshitai),ToggleUninstall])\n\n/
	\![*]\q[Back to the menu,OnMenuRun]\e"
}

Select.ToggleSFX
{
	if sfxtoggle != "On"; sfxtoggle = "On"
	else; sfxtoggle = "Off"
	--
	OnConfigMenu
}

Select.ToggleNotepad
{
	if SeeNotepad != "On"; SeeNotepad = "On"
	else; SeeNotepad = "Off"
	--
	OnConfigMenu
}

//this is old menu code. here for reference.
/*Select.sfxon
{
	sfxtoggle = "ON"
	OnConfigMenu
}

Select.sfxoff
{
	sfxtoggle = "OFF"
	OnConfigMenu
}

Select.notepadon
{
	SeeNotepad = "ON"
	OnConfigMenu
}

Select.notepadoff
{
	SeeNotepad = "OFF"
	OnConfigMenu
}*/

Select.gimmegift
{
	GiftShop
}

Select.ToggleHemisphere
{
	if hemisphere != "Northern"; hemisphere = "Northern"
	else; hemisphere = "Southern"
	--
	OnConfigMenu
}

Select.ChangeTalk
{
	"\0\s[8]Am I talking too much?\w8 Currently,\w5 I talk every %(talkrate).\n\n/
	\![*]\q[Every 30 seconds,OnTalkRate,Thirty]\n/
	\![*]\q[Every minute,OnTalkRate,Minute]\n/
	\![*]\q[Every 3 minutes,OnTalkRate,ThreeMin]\n/
	\![*]\q[Every 5 minutes,OnTalkRate,FiveMin]\n/
	\![*]\q[Don't speak,OnTalkRate,None]\n\n/
	\![*]\q[Nevermind,OnConfigMenu]\e"
}

Select.ToggleHourNotifs
{
	if HourNotifs != "On"; HourNotifs = "On"
	else; HourNotifs = "Off"
	--
	OnConfigMenu
}

OnTalkRate
{
	if reference0 == "Thirty"
	{
		talkrate = "every 30 seconds" //this displays the talk rate in the menu
		aitalkinterval = 30 //this changes the talk rate, in seconds
		
		"\0\s[0]Cool. \w8I'll speak every 30 seconds."
	}
	elseif reference0 == "Minute"
	{
		talkrate = "every minute"
		aitalkinterval = 60
		
		"\0\s[0]Alright,\w5 I'll speak every minute."
	}
	elseif reference0 == "ThreeMin"
	{
		talkrate = "every 3 minutes"
		aitalkinterval = 180
		
		"\0\s[0]Sure,\w5 I'll speak every 3 minutes."
	}
	elseif reference0 == "FiveMin"
	{
		talkrate = "every 5 minutes"
		aitalkinterval = 300
		
		"\0\s[0]Cool beans.\w8 I'll speak every 5 minutes."
	}
	else
	{
		talkrate = "never"
		aitalkinterval = 0
		
		"\0\s[4]...\w5Well,\w8 fine then."
	}
	--
	"\n\n\![*]\q[Back to config,OnConfigMenu]\n\![*]\q[I'm done,cancelnodialogue]\e"
}

Select.ToggleUpdate
{
	if AutoUpdates[0] != "On"; AutoUpdates[0] = "On"
	else; AutoUpdates[0] = "Off"
	--
	OnConfigMenu
}

Select.ToggleBeta
{
	if betaTester != "On" //If you don't want a message about opting into beta updates, replace this whole bit with betaTester = "On"
	{
		"\0\s[0]\b2If you want a message about risks of running beta versions,\w4 put it here!\w8\w8 Remember to back up your save files just in case!"
		--
		"\n\n\![*]\q[Accept the risk and opt in,OptInBeta]\n\![*]\q[No thanks,toconfig]\e"
	}
	else
	{
		betaTester = "Off"
	}
	--
	OnConfigMenu
}

Select.OptInBeta
{
	betaTester = "On"
	--
	OnConfigMenu
}

Select.ToggleUninstall
{
	if deleteshitai != "On"; deleteshitai = "On"
	else; deleteshitai = "Off"
	--
	OnConfigMenu
}

//----------Misc Functions----------

OnChoiceTimeout //Menu has timed out
{
	"\0\s[6]I'll give you a minute.\e"
}

Select.Cancel //If the main menu has been cancelled
{
	"\0\s[0]Alrighty.\e"
		
	"\0\s[0]Changed your mind?\e"
}

OnTestVar
{
	trust = 0
	mood = 0
	
	LOGGING("This is a debug function! This text will show up in Tama, or in the SHIORI log! You can also output variables and such with this function. This is super handy for debugging without having to output data to your ghost's balloon! Especially for things like loops, where you need to see certain variables at every step of the loop. Make good use of it!")
}


/*============Kero Menu============

OpenKeroMenu
{
	"\1\s[10]Yo."
	"\1\s[10]Hi."
	--
	OnKeroMenu
}

OnKeroMenu
{
	//Fill in as you like
}*/